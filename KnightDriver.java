/**
 * Cuellar Benitez, Carlos 
 * COP-3252
 * Assignment 5
 * 02/25/2023
 */
import java.util.Scanner;
import java.util.concurrent.Semaphore;

public class KnightDriver {

  public static void main(String[] args) {
    /*
     * Variable initialization as well as scanner object.
     */
    Scanner sc = new Scanner(System.in);
    char option = ' ';
    knight myKnight;
    knight opponentknight;
    int weaponOption = 0;
    System.out.println("Welcome to knight Fight!");
  /*
  * Main loop of the program, it will run once and end if the user choses anything but "Y" or "y".
  */
  do {

    String input = " ";
    /*
    * Name string validation. Checking for empty strings.
    */
    while(true){
      System.out.print("Enter the name of your knight: ");
      try{
         input = sc.next();
         if( input.length() > 0)
         {
          break;
         }
      } catch(Exception ex){
        System.out.println("Invalid option. Please enter a none-blank name.");
        sc.next();
      }
    }
      myKnight = new knight(input);   // Create the knight object for the user.

    /*
    * Weapon option input validation. Checking for non numeric values.
    */
    while(true){
      System.out.print("Now select your weapon! (Choose number)\n 1) Long Sword\n 2) Battle Axe\n 3) Spear\n 4) Warhammer\n Your choice my liege?: ");
      try{
        weaponOption = sc.nextInt();
        if (weaponOption >=1 && weaponOption <=4 ){
          break;
        }    
      }catch (Exception ex){
        System.out.println("Invalid option. Please choose with a number between 1 and 4.");
        sc.next();
       }    
    }
      switch(weaponOption) {
        case 1:
          myKnight.SetknightWeapon(knight.Weapontype.Long_sword);
          break;
        case 2:
          myKnight.SetknightWeapon(knight.Weapontype.Battle_Axe);
          break;
        case 3:
          myKnight.SetknightWeapon(knight.Weapontype.Spear);
          break;
        case 4:
          myKnight.SetknightWeapon(knight.Weapontype.WarHammer);
          break;
      }
      /*
       *  Here we obtain the opponent knight information. The main difference is the user can choose to auto generate the opponent or they
       *  can input the name and weapopn. Armour is auto generated for all.
       */
      char autogeneratedOption = ' ';
      while(autogeneratedOption != 'n' &&  autogeneratedOption != 'N' && autogeneratedOption != 'y' && autogeneratedOption != 'Y')
      {
        System.out.print("Would you like to fight an auto-generated knight? (Y|N): ");
        autogeneratedOption = sc.next().charAt(0);
      }

      if( autogeneratedOption == 'y' || autogeneratedOption== 'Y')
      {
        opponentknight = new knight();
      }

      else{
        /*
         * Name string validation. Checking for empty strings.
         */
        while(true){
          System.out.print("Enter the name of the opponent knight: ");
          try{
             input = sc.next();
             if( input.length() > 0)
             {
              break;
             }
          } catch(Exception ex){
            System.out.println("Invalid option. Please enter a none-blank name.");
            sc.next();
          }
        }
        opponentknight = new knight(input);
        weaponOption = 0;

        /*
        * Weapon option input validation. Checking for non numeric values.
        */
        while(true){
          System.out.print("Now select your weapon! (Choose number)\n 1) Long Sword\n 2) Battle Axe\n 3) Spear\n 4) Warhammer\n Your choice my liege?: ");
          try{
            weaponOption = sc.nextInt();
            if (weaponOption >=1 && weaponOption <=4 ){
              break;
            }    
          }catch (Exception ex){
            System.out.println("Invalid option. Please choose with a number between 1 and 4.");
            sc.next();
           }    
        }
          switch(weaponOption) {
            case 1:
              opponentknight.SetknightWeapon(knight.Weapontype.Long_sword);
              break;
            case 2:
            opponentknight.SetknightWeapon(knight.Weapontype.Battle_Axe);
              break;
            case 3:
            opponentknight.SetknightWeapon(knight.Weapontype.Spear);
              break;
            case 4:
            opponentknight.SetknightWeapon(knight.Weapontype.WarHammer);
              break;
          }
      }
      
  
      // Display outputs through terminal window. The star info is displayed through a class method.
      System.out.println(" -- Here are the knights chosen for fight knight! -- ");
      System.out.println(myKnight);
      System.out.println(opponentknight);
      System.out.println("---------------------------");

      int round = 1;
      int initialattacker = (int) (Math.random() * 2 + 1);  // This decides whether myknight or opponent knight attacks first. 1=myknight 2=opponenetknight.
      System.out.print("Enter any key to start the fight. Exit with (n):");
      char roundoption = sc.next().charAt(0);
      while(roundoption != 'n' && roundoption != 'N' && myKnight.GetknightHitPoints() > 0 && opponentknight.GetknightHitPoints()>0)
      {
        if( initialattacker == 1)
        {
          myKnight.toFight(myKnight, opponentknight);
          opponentknight.toFight(opponentknight,myKnight);
        }
        else{
          opponentknight.toFight(opponentknight, myKnight);
          myKnight.toFight(myKnight, opponentknight);
        }
       
        System.out.printf("------ End Round [%d], results ---------%n", round);
        System.out.println(myKnight);
        System.out.println(opponentknight);
        System.out.printf("------ End Round [%d]------------- %n", round);
       /*
       * Print out winner
       */
      if(myKnight.GetknightHitPoints() == 0)
      {
        System.out.printf("The winner is: sir %s!!!!%n", opponentknight.GetknightName());
      }
      else if( opponentknight.GetknightHitPoints() ==0)
      {
        System.out.printf("The winner is: sir %s!!!!%n", myKnight.GetknightName());
      }
        round++;
      }

  
      // Prompt to play again.
      
      option = ' ';
      while (option != 'n' && option != 'N' && option != 'y' && option != 'Y') {
        System.out.printf("Would you like to play again? (Y|N)\n");
                option = sc.next().charAt(0);
      }

    } while (option == 'Y' || option == 'y');
  
    sc.close();
  }
}  